# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cobot_msgs/CobotDoorDetectionsMsg.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CobotDoorDetectionsMsg(genpy.Message):
  _md5sum = "42a4a8805d6ea824bc2419298bd4bbf6"
  _type = "cobot_msgs/CobotDoorDetectionsMsg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32[] doorX1
float32[] doorY1
float32[] doorX2
float32[] doorY2

# Door Status:
# 0 = Unknown
# 1 = Open
# 2 = Closed
int8[] doorStatus
"""
  __slots__ = ['doorX1','doorY1','doorX2','doorY2','doorStatus']
  _slot_types = ['float32[]','float32[]','float32[]','float32[]','int8[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       doorX1,doorY1,doorX2,doorY2,doorStatus

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CobotDoorDetectionsMsg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.doorX1 is None:
        self.doorX1 = []
      if self.doorY1 is None:
        self.doorY1 = []
      if self.doorX2 is None:
        self.doorX2 = []
      if self.doorY2 is None:
        self.doorY2 = []
      if self.doorStatus is None:
        self.doorStatus = []
    else:
      self.doorX1 = []
      self.doorY1 = []
      self.doorX2 = []
      self.doorY2 = []
      self.doorStatus = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.doorX1)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.doorX1))
      length = len(self.doorY1)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.doorY1))
      length = len(self.doorX2)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.doorX2))
      length = len(self.doorY2)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.doorY2))
      length = len(self.doorStatus)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(struct.pack(pattern, *self.doorStatus))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.doorX1 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.doorY1 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.doorX2 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.doorY2 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.doorStatus = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.doorX1)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.doorX1.tostring())
      length = len(self.doorY1)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.doorY1.tostring())
      length = len(self.doorX2)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.doorX2.tostring())
      length = len(self.doorY2)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.doorY2.tostring())
      length = len(self.doorStatus)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(self.doorStatus.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.doorX1 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.doorY1 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.doorX2 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.doorY2 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.doorStatus = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
