# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cobot_msgs/LidarDisplayMsg.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class LidarDisplayMsg(genpy.Message):
  _md5sum = "cfcbc214eeeee7ce5b600cc5a2a37857"
  _type = "cobot_msgs/LidarDisplayMsg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 timestamp

float64 robotLocX
float64 robotLocY
float64 robotAngle

float64 windowSize

float32[] lines_p1x
float32[] lines_p1y
float32[] lines_p2x
float32[] lines_p2y
uint32[]   lines_col

float32[] points_x
float32[] points_y
uint32[]   points_col

float32[] circles_x
float32[] circles_y
uint32[]   circles_col

float32[] text_x
float32[] text_y
uint32[] text_col
string[] text
float32[] text_height
bool[] text_in_window_coords
"""
  __slots__ = ['timestamp','robotLocX','robotLocY','robotAngle','windowSize','lines_p1x','lines_p1y','lines_p2x','lines_p2y','lines_col','points_x','points_y','points_col','circles_x','circles_y','circles_col','text_x','text_y','text_col','text','text_height','text_in_window_coords']
  _slot_types = ['float64','float64','float64','float64','float64','float32[]','float32[]','float32[]','float32[]','uint32[]','float32[]','float32[]','uint32[]','float32[]','float32[]','uint32[]','float32[]','float32[]','uint32[]','string[]','float32[]','bool[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,robotLocX,robotLocY,robotAngle,windowSize,lines_p1x,lines_p1y,lines_p2x,lines_p2y,lines_col,points_x,points_y,points_col,circles_x,circles_y,circles_col,text_x,text_y,text_col,text,text_height,text_in_window_coords

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LidarDisplayMsg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = 0.
      if self.robotLocX is None:
        self.robotLocX = 0.
      if self.robotLocY is None:
        self.robotLocY = 0.
      if self.robotAngle is None:
        self.robotAngle = 0.
      if self.windowSize is None:
        self.windowSize = 0.
      if self.lines_p1x is None:
        self.lines_p1x = []
      if self.lines_p1y is None:
        self.lines_p1y = []
      if self.lines_p2x is None:
        self.lines_p2x = []
      if self.lines_p2y is None:
        self.lines_p2y = []
      if self.lines_col is None:
        self.lines_col = []
      if self.points_x is None:
        self.points_x = []
      if self.points_y is None:
        self.points_y = []
      if self.points_col is None:
        self.points_col = []
      if self.circles_x is None:
        self.circles_x = []
      if self.circles_y is None:
        self.circles_y = []
      if self.circles_col is None:
        self.circles_col = []
      if self.text_x is None:
        self.text_x = []
      if self.text_y is None:
        self.text_y = []
      if self.text_col is None:
        self.text_col = []
      if self.text is None:
        self.text = []
      if self.text_height is None:
        self.text_height = []
      if self.text_in_window_coords is None:
        self.text_in_window_coords = []
    else:
      self.timestamp = 0.
      self.robotLocX = 0.
      self.robotLocY = 0.
      self.robotAngle = 0.
      self.windowSize = 0.
      self.lines_p1x = []
      self.lines_p1y = []
      self.lines_p2x = []
      self.lines_p2y = []
      self.lines_col = []
      self.points_x = []
      self.points_y = []
      self.points_col = []
      self.circles_x = []
      self.circles_y = []
      self.circles_col = []
      self.text_x = []
      self.text_y = []
      self.text_col = []
      self.text = []
      self.text_height = []
      self.text_in_window_coords = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5d().pack(_x.timestamp, _x.robotLocX, _x.robotLocY, _x.robotAngle, _x.windowSize))
      length = len(self.lines_p1x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.lines_p1x))
      length = len(self.lines_p1y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.lines_p1y))
      length = len(self.lines_p2x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.lines_p2x))
      length = len(self.lines_p2y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.lines_p2y))
      length = len(self.lines_col)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.pack(pattern, *self.lines_col))
      length = len(self.points_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.points_x))
      length = len(self.points_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.points_y))
      length = len(self.points_col)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.pack(pattern, *self.points_col))
      length = len(self.circles_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.circles_x))
      length = len(self.circles_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.circles_y))
      length = len(self.circles_col)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.pack(pattern, *self.circles_col))
      length = len(self.text_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.text_x))
      length = len(self.text_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.text_y))
      length = len(self.text_col)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.pack(pattern, *self.text_col))
      length = len(self.text)
      buff.write(_struct_I.pack(length))
      for val1 in self.text:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.text_height)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.text_height))
      length = len(self.text_in_window_coords)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.pack(pattern, *self.text_in_window_coords))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 40
      (_x.timestamp, _x.robotLocX, _x.robotLocY, _x.robotAngle, _x.windowSize,) = _get_struct_5d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.lines_p1x = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.lines_p1y = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.lines_p2x = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.lines_p2y = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.lines_col = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.points_x = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.points_y = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.points_col = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.circles_x = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.circles_y = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.circles_col = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.text_x = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.text_y = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.text_col = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.text = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.text.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.text_height = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.text_in_window_coords = struct.unpack(pattern, str[start:end])
      self.text_in_window_coords = map(bool, self.text_in_window_coords)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5d().pack(_x.timestamp, _x.robotLocX, _x.robotLocY, _x.robotAngle, _x.windowSize))
      length = len(self.lines_p1x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.lines_p1x.tostring())
      length = len(self.lines_p1y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.lines_p1y.tostring())
      length = len(self.lines_p2x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.lines_p2x.tostring())
      length = len(self.lines_p2y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.lines_p2y.tostring())
      length = len(self.lines_col)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.lines_col.tostring())
      length = len(self.points_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.points_x.tostring())
      length = len(self.points_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.points_y.tostring())
      length = len(self.points_col)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.points_col.tostring())
      length = len(self.circles_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.circles_x.tostring())
      length = len(self.circles_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.circles_y.tostring())
      length = len(self.circles_col)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.circles_col.tostring())
      length = len(self.text_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.text_x.tostring())
      length = len(self.text_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.text_y.tostring())
      length = len(self.text_col)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.text_col.tostring())
      length = len(self.text)
      buff.write(_struct_I.pack(length))
      for val1 in self.text:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.text_height)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.text_height.tostring())
      length = len(self.text_in_window_coords)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.text_in_window_coords.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 40
      (_x.timestamp, _x.robotLocX, _x.robotLocY, _x.robotAngle, _x.windowSize,) = _get_struct_5d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.lines_p1x = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.lines_p1y = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.lines_p2x = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.lines_p2y = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.lines_col = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.points_x = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.points_y = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.points_col = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.circles_x = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.circles_y = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.circles_col = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.text_x = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.text_y = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.text_col = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.text = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.text.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.text_height = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      end += struct.calcsize(pattern)
      self.text_in_window_coords = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.text_in_window_coords = map(bool, self.text_in_window_coords)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5d = None
def _get_struct_5d():
    global _struct_5d
    if _struct_5d is None:
        _struct_5d = struct.Struct("<5d")
    return _struct_5d
