# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cobot_msgs/CobotLocalization3DSrvRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CobotLocalization3DSrvRequest(genpy.Message):
  _md5sum = "05f2bf1b548fbcde99b5363c93f51c80"
  _type = "cobot_msgs/CobotLocalization3DSrvRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """

float32 loc_x
float32 loc_y
float32 loc_z
float32 orientation_w
float32 orientation_x
float32 orientation_y
float32 orientation_z
string map

"""
  __slots__ = ['loc_x','loc_y','loc_z','orientation_w','orientation_x','orientation_y','orientation_z','map']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       loc_x,loc_y,loc_z,orientation_w,orientation_x,orientation_y,orientation_z,map

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CobotLocalization3DSrvRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.loc_x is None:
        self.loc_x = 0.
      if self.loc_y is None:
        self.loc_y = 0.
      if self.loc_z is None:
        self.loc_z = 0.
      if self.orientation_w is None:
        self.orientation_w = 0.
      if self.orientation_x is None:
        self.orientation_x = 0.
      if self.orientation_y is None:
        self.orientation_y = 0.
      if self.orientation_z is None:
        self.orientation_z = 0.
      if self.map is None:
        self.map = ''
    else:
      self.loc_x = 0.
      self.loc_y = 0.
      self.loc_z = 0.
      self.orientation_w = 0.
      self.orientation_x = 0.
      self.orientation_y = 0.
      self.orientation_z = 0.
      self.map = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7f().pack(_x.loc_x, _x.loc_y, _x.loc_z, _x.orientation_w, _x.orientation_x, _x.orientation_y, _x.orientation_z))
      _x = self.map
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.loc_x, _x.loc_y, _x.loc_z, _x.orientation_w, _x.orientation_x, _x.orientation_y, _x.orientation_z,) = _get_struct_7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.map = str[start:end].decode('utf-8')
      else:
        self.map = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7f().pack(_x.loc_x, _x.loc_y, _x.loc_z, _x.orientation_w, _x.orientation_x, _x.orientation_y, _x.orientation_z))
      _x = self.map
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.loc_x, _x.loc_y, _x.loc_z, _x.orientation_w, _x.orientation_x, _x.orientation_y, _x.orientation_z,) = _get_struct_7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.map = str[start:end].decode('utf-8')
      else:
        self.map = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7f = None
def _get_struct_7f():
    global _struct_7f
    if _struct_7f is None:
        _struct_7f = struct.Struct("<7f")
    return _struct_7f
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cobot_msgs/CobotLocalization3DSrvResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CobotLocalization3DSrvResponse(genpy.Message):
  _md5sum = "1e6cf40cb2e003b6278dc077bb410579"
  _type = "cobot_msgs/CobotLocalization3DSrvResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
float32 loc_x
float32 loc_y
float32 loc_z
float32 orientation_w
float32 orientation_x
float32 orientation_y
float32 orientation_z
string map

float32[] particles_x
float32[] particles_y
float32[] particles_z
float32[] particles_orientation_w
float32[] particles_orientation_x
float32[] particles_orientation_y
float32[] particles_orientation_z
float32[] particles_weight


"""
  __slots__ = ['loc_x','loc_y','loc_z','orientation_w','orientation_x','orientation_y','orientation_z','map','particles_x','particles_y','particles_z','particles_orientation_w','particles_orientation_x','particles_orientation_y','particles_orientation_z','particles_weight']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','string','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       loc_x,loc_y,loc_z,orientation_w,orientation_x,orientation_y,orientation_z,map,particles_x,particles_y,particles_z,particles_orientation_w,particles_orientation_x,particles_orientation_y,particles_orientation_z,particles_weight

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CobotLocalization3DSrvResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.loc_x is None:
        self.loc_x = 0.
      if self.loc_y is None:
        self.loc_y = 0.
      if self.loc_z is None:
        self.loc_z = 0.
      if self.orientation_w is None:
        self.orientation_w = 0.
      if self.orientation_x is None:
        self.orientation_x = 0.
      if self.orientation_y is None:
        self.orientation_y = 0.
      if self.orientation_z is None:
        self.orientation_z = 0.
      if self.map is None:
        self.map = ''
      if self.particles_x is None:
        self.particles_x = []
      if self.particles_y is None:
        self.particles_y = []
      if self.particles_z is None:
        self.particles_z = []
      if self.particles_orientation_w is None:
        self.particles_orientation_w = []
      if self.particles_orientation_x is None:
        self.particles_orientation_x = []
      if self.particles_orientation_y is None:
        self.particles_orientation_y = []
      if self.particles_orientation_z is None:
        self.particles_orientation_z = []
      if self.particles_weight is None:
        self.particles_weight = []
    else:
      self.loc_x = 0.
      self.loc_y = 0.
      self.loc_z = 0.
      self.orientation_w = 0.
      self.orientation_x = 0.
      self.orientation_y = 0.
      self.orientation_z = 0.
      self.map = ''
      self.particles_x = []
      self.particles_y = []
      self.particles_z = []
      self.particles_orientation_w = []
      self.particles_orientation_x = []
      self.particles_orientation_y = []
      self.particles_orientation_z = []
      self.particles_weight = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7f().pack(_x.loc_x, _x.loc_y, _x.loc_z, _x.orientation_w, _x.orientation_x, _x.orientation_y, _x.orientation_z))
      _x = self.map
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.particles_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.particles_x))
      length = len(self.particles_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.particles_y))
      length = len(self.particles_z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.particles_z))
      length = len(self.particles_orientation_w)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.particles_orientation_w))
      length = len(self.particles_orientation_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.particles_orientation_x))
      length = len(self.particles_orientation_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.particles_orientation_y))
      length = len(self.particles_orientation_z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.particles_orientation_z))
      length = len(self.particles_weight)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.particles_weight))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.loc_x, _x.loc_y, _x.loc_z, _x.orientation_w, _x.orientation_x, _x.orientation_y, _x.orientation_z,) = _get_struct_7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.map = str[start:end].decode('utf-8')
      else:
        self.map = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.particles_x = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.particles_y = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.particles_z = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.particles_orientation_w = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.particles_orientation_x = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.particles_orientation_y = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.particles_orientation_z = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.particles_weight = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7f().pack(_x.loc_x, _x.loc_y, _x.loc_z, _x.orientation_w, _x.orientation_x, _x.orientation_y, _x.orientation_z))
      _x = self.map
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.particles_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.particles_x.tostring())
      length = len(self.particles_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.particles_y.tostring())
      length = len(self.particles_z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.particles_z.tostring())
      length = len(self.particles_orientation_w)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.particles_orientation_w.tostring())
      length = len(self.particles_orientation_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.particles_orientation_x.tostring())
      length = len(self.particles_orientation_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.particles_orientation_y.tostring())
      length = len(self.particles_orientation_z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.particles_orientation_z.tostring())
      length = len(self.particles_weight)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.particles_weight.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.loc_x, _x.loc_y, _x.loc_z, _x.orientation_w, _x.orientation_x, _x.orientation_y, _x.orientation_z,) = _get_struct_7f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.map = str[start:end].decode('utf-8')
      else:
        self.map = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.particles_x = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.particles_y = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.particles_z = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.particles_orientation_w = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.particles_orientation_x = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.particles_orientation_y = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.particles_orientation_z = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.particles_weight = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7f = None
def _get_struct_7f():
    global _struct_7f
    if _struct_7f is None:
        _struct_7f = struct.Struct("<7f")
    return _struct_7f
class CobotLocalization3DSrv(object):
  _type          = 'cobot_msgs/CobotLocalization3DSrv'
  _md5sum = '237cc0045c5cbff3d9f5134b31430f80'
  _request_class  = CobotLocalization3DSrvRequest
  _response_class = CobotLocalization3DSrvResponse
