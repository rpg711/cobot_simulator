# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cobot_msgs/CobotRemoteInterfaceSrvRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CobotRemoteInterfaceSrvRequest(genpy.Message):
  _md5sum = "6c65d09fa2d9280c4025b8e065bb2449"
  _type = "cobot_msgs/CobotRemoteInterfaceSrvRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """

float32 drive_x
float32 drive_y
float32 drive_r
float32 max_vel_trans
float32 max_vel_rot


int32 command_num










int32 command_type


float32 loc_x
float32 loc_y
float32 orientation
float32 distance_tolerance
float32 angle_tolerance
string map

"""
  __slots__ = ['drive_x','drive_y','drive_r','max_vel_trans','max_vel_rot','command_num','command_type','loc_x','loc_y','orientation','distance_tolerance','angle_tolerance','map']
  _slot_types = ['float32','float32','float32','float32','float32','int32','int32','float32','float32','float32','float32','float32','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       drive_x,drive_y,drive_r,max_vel_trans,max_vel_rot,command_num,command_type,loc_x,loc_y,orientation,distance_tolerance,angle_tolerance,map

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CobotRemoteInterfaceSrvRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.drive_x is None:
        self.drive_x = 0.
      if self.drive_y is None:
        self.drive_y = 0.
      if self.drive_r is None:
        self.drive_r = 0.
      if self.max_vel_trans is None:
        self.max_vel_trans = 0.
      if self.max_vel_rot is None:
        self.max_vel_rot = 0.
      if self.command_num is None:
        self.command_num = 0
      if self.command_type is None:
        self.command_type = 0
      if self.loc_x is None:
        self.loc_x = 0.
      if self.loc_y is None:
        self.loc_y = 0.
      if self.orientation is None:
        self.orientation = 0.
      if self.distance_tolerance is None:
        self.distance_tolerance = 0.
      if self.angle_tolerance is None:
        self.angle_tolerance = 0.
      if self.map is None:
        self.map = ''
    else:
      self.drive_x = 0.
      self.drive_y = 0.
      self.drive_r = 0.
      self.max_vel_trans = 0.
      self.max_vel_rot = 0.
      self.command_num = 0
      self.command_type = 0
      self.loc_x = 0.
      self.loc_y = 0.
      self.orientation = 0.
      self.distance_tolerance = 0.
      self.angle_tolerance = 0.
      self.map = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5f2i5f().pack(_x.drive_x, _x.drive_y, _x.drive_r, _x.max_vel_trans, _x.max_vel_rot, _x.command_num, _x.command_type, _x.loc_x, _x.loc_y, _x.orientation, _x.distance_tolerance, _x.angle_tolerance))
      _x = self.map
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.drive_x, _x.drive_y, _x.drive_r, _x.max_vel_trans, _x.max_vel_rot, _x.command_num, _x.command_type, _x.loc_x, _x.loc_y, _x.orientation, _x.distance_tolerance, _x.angle_tolerance,) = _get_struct_5f2i5f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.map = str[start:end].decode('utf-8')
      else:
        self.map = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5f2i5f().pack(_x.drive_x, _x.drive_y, _x.drive_r, _x.max_vel_trans, _x.max_vel_rot, _x.command_num, _x.command_type, _x.loc_x, _x.loc_y, _x.orientation, _x.distance_tolerance, _x.angle_tolerance))
      _x = self.map
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.drive_x, _x.drive_y, _x.drive_r, _x.max_vel_trans, _x.max_vel_rot, _x.command_num, _x.command_type, _x.loc_x, _x.loc_y, _x.orientation, _x.distance_tolerance, _x.angle_tolerance,) = _get_struct_5f2i5f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.map = str[start:end].decode('utf-8')
      else:
        self.map = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5f2i5f = None
def _get_struct_5f2i5f():
    global _struct_5f2i5f
    if _struct_5f2i5f is None:
        _struct_5f2i5f = struct.Struct("<5f2i5f")
    return _struct_5f2i5f
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cobot_msgs/CobotRemoteInterfaceSrvResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CobotRemoteInterfaceSrvResponse(genpy.Message):
  _md5sum = "df36cae3dc736db325881999b2ce8e38"
  _type = "cobot_msgs/CobotRemoteInterfaceSrvResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
float32 loc_x
float32 loc_y
float32 orientation

float32[] particles_x
float32[] particles_y
float32[] particles_weight
float32[] locations_weight

int8 err_code

"""
  __slots__ = ['loc_x','loc_y','orientation','particles_x','particles_y','particles_weight','locations_weight','err_code']
  _slot_types = ['float32','float32','float32','float32[]','float32[]','float32[]','float32[]','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       loc_x,loc_y,orientation,particles_x,particles_y,particles_weight,locations_weight,err_code

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CobotRemoteInterfaceSrvResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.loc_x is None:
        self.loc_x = 0.
      if self.loc_y is None:
        self.loc_y = 0.
      if self.orientation is None:
        self.orientation = 0.
      if self.particles_x is None:
        self.particles_x = []
      if self.particles_y is None:
        self.particles_y = []
      if self.particles_weight is None:
        self.particles_weight = []
      if self.locations_weight is None:
        self.locations_weight = []
      if self.err_code is None:
        self.err_code = 0
    else:
      self.loc_x = 0.
      self.loc_y = 0.
      self.orientation = 0.
      self.particles_x = []
      self.particles_y = []
      self.particles_weight = []
      self.locations_weight = []
      self.err_code = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3f().pack(_x.loc_x, _x.loc_y, _x.orientation))
      length = len(self.particles_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.particles_x))
      length = len(self.particles_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.particles_y))
      length = len(self.particles_weight)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.particles_weight))
      length = len(self.locations_weight)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.locations_weight))
      buff.write(_get_struct_b().pack(self.err_code))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.loc_x, _x.loc_y, _x.orientation,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.particles_x = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.particles_y = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.particles_weight = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.locations_weight = struct.unpack(pattern, str[start:end])
      start = end
      end += 1
      (self.err_code,) = _get_struct_b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3f().pack(_x.loc_x, _x.loc_y, _x.orientation))
      length = len(self.particles_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.particles_x.tostring())
      length = len(self.particles_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.particles_y.tostring())
      length = len(self.particles_weight)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.particles_weight.tostring())
      length = len(self.locations_weight)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.locations_weight.tostring())
      buff.write(_get_struct_b().pack(self.err_code))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.loc_x, _x.loc_y, _x.orientation,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.particles_x = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.particles_y = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.particles_weight = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.locations_weight = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 1
      (self.err_code,) = _get_struct_b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
class CobotRemoteInterfaceSrv(object):
  _type          = 'cobot_msgs/CobotRemoteInterfaceSrv'
  _md5sum = '01146b8ee6bc341b195eb59880324094'
  _request_class  = CobotRemoteInterfaceSrvRequest
  _response_class = CobotRemoteInterfaceSrvResponse
