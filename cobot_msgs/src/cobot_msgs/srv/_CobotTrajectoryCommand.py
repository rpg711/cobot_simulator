# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cobot_msgs/CobotTrajectoryCommandRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import cobot_msgs.msg

class CobotTrajectoryCommandRequest(genpy.Message):
  _md5sum = "84c9c3a93008f5681e287cf3f677eb20"
  _type = "cobot_msgs/CobotTrajectoryCommandRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """cobot_msgs/Trajectory2D trajectory
float32 distance_tolerance
float32 angle_tolerance


bool use_localization
bool preemptive



int32 ObstAvNone = 0

int32 ObstAvStop = 1

int32 ObstAvNormal = 2

int32 obstacle_avoidance_mode

float32 min_clear_path



int32 CoordinatesGlobal = 0

int32 CoordinatesRelative = 1

int32 coordinates_type


bool reset_odometry


================================================================================
MSG: cobot_msgs/Trajectory2D
# Required: Pose2D specifications of the trajectory waypoints.
geometry_msgs/Pose2D[] waypoints
# Optional: Motion models to use for each segment.
cobot_msgs/MotionModel2D[] motion_models
# Required: The bounding motion model for the entire trajectory.
cobot_msgs/MotionModel2D motion_model_bounds

================================================================================
MSG: geometry_msgs/Pose2D
# This expresses a position and orientation on a 2D manifold.

float64 x
float64 y
float64 theta
================================================================================
MSG: cobot_msgs/MotionModel2D
cobot_msgs/AccelerationLimits translation
cobot_msgs/AccelerationLimits rotation

================================================================================
MSG: cobot_msgs/AccelerationLimits
float32 max_acceleration
float32 max_speed
"""
  # Pseudo-constants
  ObstAvNone = 0
  ObstAvStop = 1
  ObstAvNormal = 2
  CoordinatesGlobal = 0
  CoordinatesRelative = 1

  __slots__ = ['trajectory','distance_tolerance','angle_tolerance','use_localization','preemptive','obstacle_avoidance_mode','min_clear_path','coordinates_type','reset_odometry']
  _slot_types = ['cobot_msgs/Trajectory2D','float32','float32','bool','bool','int32','float32','int32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       trajectory,distance_tolerance,angle_tolerance,use_localization,preemptive,obstacle_avoidance_mode,min_clear_path,coordinates_type,reset_odometry

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CobotTrajectoryCommandRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.trajectory is None:
        self.trajectory = cobot_msgs.msg.Trajectory2D()
      if self.distance_tolerance is None:
        self.distance_tolerance = 0.
      if self.angle_tolerance is None:
        self.angle_tolerance = 0.
      if self.use_localization is None:
        self.use_localization = False
      if self.preemptive is None:
        self.preemptive = False
      if self.obstacle_avoidance_mode is None:
        self.obstacle_avoidance_mode = 0
      if self.min_clear_path is None:
        self.min_clear_path = 0.
      if self.coordinates_type is None:
        self.coordinates_type = 0
      if self.reset_odometry is None:
        self.reset_odometry = False
    else:
      self.trajectory = cobot_msgs.msg.Trajectory2D()
      self.distance_tolerance = 0.
      self.angle_tolerance = 0.
      self.use_localization = False
      self.preemptive = False
      self.obstacle_avoidance_mode = 0
      self.min_clear_path = 0.
      self.coordinates_type = 0
      self.reset_odometry = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.trajectory.waypoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory.waypoints:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
      length = len(self.trajectory.motion_models)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory.motion_models:
        _v1 = val1.translation
        _x = _v1
        buff.write(_get_struct_2f().pack(_x.max_acceleration, _x.max_speed))
        _v2 = val1.rotation
        _x = _v2
        buff.write(_get_struct_2f().pack(_x.max_acceleration, _x.max_speed))
      _x = self
      buff.write(_get_struct_6f2BifiB().pack(_x.trajectory.motion_model_bounds.translation.max_acceleration, _x.trajectory.motion_model_bounds.translation.max_speed, _x.trajectory.motion_model_bounds.rotation.max_acceleration, _x.trajectory.motion_model_bounds.rotation.max_speed, _x.distance_tolerance, _x.angle_tolerance, _x.use_localization, _x.preemptive, _x.obstacle_avoidance_mode, _x.min_clear_path, _x.coordinates_type, _x.reset_odometry))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.trajectory is None:
        self.trajectory = cobot_msgs.msg.Trajectory2D()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory.waypoints = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose2D()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        self.trajectory.waypoints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory.motion_models = []
      for i in range(0, length):
        val1 = cobot_msgs.msg.MotionModel2D()
        _v3 = val1.translation
        _x = _v3
        start = end
        end += 8
        (_x.max_acceleration, _x.max_speed,) = _get_struct_2f().unpack(str[start:end])
        _v4 = val1.rotation
        _x = _v4
        start = end
        end += 8
        (_x.max_acceleration, _x.max_speed,) = _get_struct_2f().unpack(str[start:end])
        self.trajectory.motion_models.append(val1)
      _x = self
      start = end
      end += 39
      (_x.trajectory.motion_model_bounds.translation.max_acceleration, _x.trajectory.motion_model_bounds.translation.max_speed, _x.trajectory.motion_model_bounds.rotation.max_acceleration, _x.trajectory.motion_model_bounds.rotation.max_speed, _x.distance_tolerance, _x.angle_tolerance, _x.use_localization, _x.preemptive, _x.obstacle_avoidance_mode, _x.min_clear_path, _x.coordinates_type, _x.reset_odometry,) = _get_struct_6f2BifiB().unpack(str[start:end])
      self.use_localization = bool(self.use_localization)
      self.preemptive = bool(self.preemptive)
      self.reset_odometry = bool(self.reset_odometry)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.trajectory.waypoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory.waypoints:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
      length = len(self.trajectory.motion_models)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory.motion_models:
        _v5 = val1.translation
        _x = _v5
        buff.write(_get_struct_2f().pack(_x.max_acceleration, _x.max_speed))
        _v6 = val1.rotation
        _x = _v6
        buff.write(_get_struct_2f().pack(_x.max_acceleration, _x.max_speed))
      _x = self
      buff.write(_get_struct_6f2BifiB().pack(_x.trajectory.motion_model_bounds.translation.max_acceleration, _x.trajectory.motion_model_bounds.translation.max_speed, _x.trajectory.motion_model_bounds.rotation.max_acceleration, _x.trajectory.motion_model_bounds.rotation.max_speed, _x.distance_tolerance, _x.angle_tolerance, _x.use_localization, _x.preemptive, _x.obstacle_avoidance_mode, _x.min_clear_path, _x.coordinates_type, _x.reset_odometry))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.trajectory is None:
        self.trajectory = cobot_msgs.msg.Trajectory2D()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory.waypoints = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose2D()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        self.trajectory.waypoints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory.motion_models = []
      for i in range(0, length):
        val1 = cobot_msgs.msg.MotionModel2D()
        _v7 = val1.translation
        _x = _v7
        start = end
        end += 8
        (_x.max_acceleration, _x.max_speed,) = _get_struct_2f().unpack(str[start:end])
        _v8 = val1.rotation
        _x = _v8
        start = end
        end += 8
        (_x.max_acceleration, _x.max_speed,) = _get_struct_2f().unpack(str[start:end])
        self.trajectory.motion_models.append(val1)
      _x = self
      start = end
      end += 39
      (_x.trajectory.motion_model_bounds.translation.max_acceleration, _x.trajectory.motion_model_bounds.translation.max_speed, _x.trajectory.motion_model_bounds.rotation.max_acceleration, _x.trajectory.motion_model_bounds.rotation.max_speed, _x.distance_tolerance, _x.angle_tolerance, _x.use_localization, _x.preemptive, _x.obstacle_avoidance_mode, _x.min_clear_path, _x.coordinates_type, _x.reset_odometry,) = _get_struct_6f2BifiB().unpack(str[start:end])
      self.use_localization = bool(self.use_localization)
      self.preemptive = bool(self.preemptive)
      self.reset_odometry = bool(self.reset_odometry)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6f2BifiB = None
def _get_struct_6f2BifiB():
    global _struct_6f2BifiB
    if _struct_6f2BifiB is None:
        _struct_6f2BifiB = struct.Struct("<6f2BifiB")
    return _struct_6f2BifiB
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cobot_msgs/CobotTrajectoryCommandResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CobotTrajectoryCommandResponse(genpy.Message):
  _md5sum = "4f4fe764eaaa6c3987de3feb7bf7472f"
  _type = "cobot_msgs/CobotTrajectoryCommandResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
int32 Success = 0

int32 ErrorWrongMode = 1

int32 ErrorBusy = 2

int32 ErrorNav = 3

int32 ErrorInvalid = 4

int32 error_code

"""
  # Pseudo-constants
  Success = 0
  ErrorWrongMode = 1
  ErrorBusy = 2
  ErrorNav = 3
  ErrorInvalid = 4

  __slots__ = ['error_code']
  _slot_types = ['int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       error_code

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CobotTrajectoryCommandResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.error_code is None:
        self.error_code = 0
    else:
      self.error_code = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_i().pack(self.error_code))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (self.error_code,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_i().pack(self.error_code))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (self.error_code,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
class CobotTrajectoryCommand(object):
  _type          = 'cobot_msgs/CobotTrajectoryCommand'
  _md5sum = 'cbb3bdfb8acc56da5c8f91fdb3dda7a5'
  _request_class  = CobotTrajectoryCommandRequest
  _response_class = CobotTrajectoryCommandResponse
