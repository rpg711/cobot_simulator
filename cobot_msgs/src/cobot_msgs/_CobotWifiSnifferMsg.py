# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cobot_msgs/CobotWifiSnifferMsg.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CobotWifiSnifferMsg(genpy.Message):
  _md5sum = "c8aa3575a8ff53727671aa4e4d8b57a9"
  _type = "cobot_msgs/CobotWifiSnifferMsg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 ros_time
float64 frame_time
int32 frame_number
int32 frame_len
int64 source_address
int64 destination_address
int64 bssid
int32 rssi
float32 datarate
int32 beacon_channel
int32 channel_freq
int8 channel_type
string ssid
int16 channel_primary
int8 channel_secondary_offset
int8 channel_secondary_width
"""
  __slots__ = ['ros_time','frame_time','frame_number','frame_len','source_address','destination_address','bssid','rssi','datarate','beacon_channel','channel_freq','channel_type','ssid','channel_primary','channel_secondary_offset','channel_secondary_width']
  _slot_types = ['float64','float64','int32','int32','int64','int64','int64','int32','float32','int32','int32','int8','string','int16','int8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ros_time,frame_time,frame_number,frame_len,source_address,destination_address,bssid,rssi,datarate,beacon_channel,channel_freq,channel_type,ssid,channel_primary,channel_secondary_offset,channel_secondary_width

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CobotWifiSnifferMsg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.ros_time is None:
        self.ros_time = 0.
      if self.frame_time is None:
        self.frame_time = 0.
      if self.frame_number is None:
        self.frame_number = 0
      if self.frame_len is None:
        self.frame_len = 0
      if self.source_address is None:
        self.source_address = 0
      if self.destination_address is None:
        self.destination_address = 0
      if self.bssid is None:
        self.bssid = 0
      if self.rssi is None:
        self.rssi = 0
      if self.datarate is None:
        self.datarate = 0.
      if self.beacon_channel is None:
        self.beacon_channel = 0
      if self.channel_freq is None:
        self.channel_freq = 0
      if self.channel_type is None:
        self.channel_type = 0
      if self.ssid is None:
        self.ssid = ''
      if self.channel_primary is None:
        self.channel_primary = 0
      if self.channel_secondary_offset is None:
        self.channel_secondary_offset = 0
      if self.channel_secondary_width is None:
        self.channel_secondary_width = 0
    else:
      self.ros_time = 0.
      self.frame_time = 0.
      self.frame_number = 0
      self.frame_len = 0
      self.source_address = 0
      self.destination_address = 0
      self.bssid = 0
      self.rssi = 0
      self.datarate = 0.
      self.beacon_channel = 0
      self.channel_freq = 0
      self.channel_type = 0
      self.ssid = ''
      self.channel_primary = 0
      self.channel_secondary_offset = 0
      self.channel_secondary_width = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2d2i3qif2ib().pack(_x.ros_time, _x.frame_time, _x.frame_number, _x.frame_len, _x.source_address, _x.destination_address, _x.bssid, _x.rssi, _x.datarate, _x.beacon_channel, _x.channel_freq, _x.channel_type))
      _x = self.ssid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_h2b().pack(_x.channel_primary, _x.channel_secondary_offset, _x.channel_secondary_width))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 65
      (_x.ros_time, _x.frame_time, _x.frame_number, _x.frame_len, _x.source_address, _x.destination_address, _x.bssid, _x.rssi, _x.datarate, _x.beacon_channel, _x.channel_freq, _x.channel_type,) = _get_struct_2d2i3qif2ib().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ssid = str[start:end].decode('utf-8')
      else:
        self.ssid = str[start:end]
      _x = self
      start = end
      end += 4
      (_x.channel_primary, _x.channel_secondary_offset, _x.channel_secondary_width,) = _get_struct_h2b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2d2i3qif2ib().pack(_x.ros_time, _x.frame_time, _x.frame_number, _x.frame_len, _x.source_address, _x.destination_address, _x.bssid, _x.rssi, _x.datarate, _x.beacon_channel, _x.channel_freq, _x.channel_type))
      _x = self.ssid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_h2b().pack(_x.channel_primary, _x.channel_secondary_offset, _x.channel_secondary_width))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 65
      (_x.ros_time, _x.frame_time, _x.frame_number, _x.frame_len, _x.source_address, _x.destination_address, _x.bssid, _x.rssi, _x.datarate, _x.beacon_channel, _x.channel_freq, _x.channel_type,) = _get_struct_2d2i3qif2ib().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ssid = str[start:end].decode('utf-8')
      else:
        self.ssid = str[start:end]
      _x = self
      start = end
      end += 4
      (_x.channel_primary, _x.channel_secondary_offset, _x.channel_secondary_width,) = _get_struct_h2b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d2i3qif2ib = None
def _get_struct_2d2i3qif2ib():
    global _struct_2d2i3qif2ib
    if _struct_2d2i3qif2ib is None:
        _struct_2d2i3qif2ib = struct.Struct("<2d2i3qif2ib")
    return _struct_2d2i3qif2ib
_struct_h2b = None
def _get_struct_h2b():
    global _struct_h2b
    if _struct_h2b is None:
        _struct_h2b = struct.Struct("<h2b")
    return _struct_h2b
