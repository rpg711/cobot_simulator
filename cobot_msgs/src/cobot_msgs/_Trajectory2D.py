# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cobot_msgs/Trajectory2D.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import cobot_msgs.msg

class Trajectory2D(genpy.Message):
  _md5sum = "a034b0fd3aaf714e640b2cd1867c184d"
  _type = "cobot_msgs/Trajectory2D"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Required: Pose2D specifications of the trajectory waypoints.
geometry_msgs/Pose2D[] waypoints
# Optional: Motion models to use for each segment.
cobot_msgs/MotionModel2D[] motion_models
# Required: The bounding motion model for the entire trajectory.
cobot_msgs/MotionModel2D motion_model_bounds

================================================================================
MSG: geometry_msgs/Pose2D
# This expresses a position and orientation on a 2D manifold.

float64 x
float64 y
float64 theta
================================================================================
MSG: cobot_msgs/MotionModel2D
cobot_msgs/AccelerationLimits translation
cobot_msgs/AccelerationLimits rotation

================================================================================
MSG: cobot_msgs/AccelerationLimits
float32 max_acceleration
float32 max_speed
"""
  __slots__ = ['waypoints','motion_models','motion_model_bounds']
  _slot_types = ['geometry_msgs/Pose2D[]','cobot_msgs/MotionModel2D[]','cobot_msgs/MotionModel2D']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       waypoints,motion_models,motion_model_bounds

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Trajectory2D, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.waypoints is None:
        self.waypoints = []
      if self.motion_models is None:
        self.motion_models = []
      if self.motion_model_bounds is None:
        self.motion_model_bounds = cobot_msgs.msg.MotionModel2D()
    else:
      self.waypoints = []
      self.motion_models = []
      self.motion_model_bounds = cobot_msgs.msg.MotionModel2D()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.waypoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.waypoints:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
      length = len(self.motion_models)
      buff.write(_struct_I.pack(length))
      for val1 in self.motion_models:
        _v1 = val1.translation
        _x = _v1
        buff.write(_get_struct_2f().pack(_x.max_acceleration, _x.max_speed))
        _v2 = val1.rotation
        _x = _v2
        buff.write(_get_struct_2f().pack(_x.max_acceleration, _x.max_speed))
      _x = self
      buff.write(_get_struct_4f().pack(_x.motion_model_bounds.translation.max_acceleration, _x.motion_model_bounds.translation.max_speed, _x.motion_model_bounds.rotation.max_acceleration, _x.motion_model_bounds.rotation.max_speed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.waypoints is None:
        self.waypoints = None
      if self.motion_models is None:
        self.motion_models = None
      if self.motion_model_bounds is None:
        self.motion_model_bounds = cobot_msgs.msg.MotionModel2D()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.waypoints = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose2D()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        self.waypoints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.motion_models = []
      for i in range(0, length):
        val1 = cobot_msgs.msg.MotionModel2D()
        _v3 = val1.translation
        _x = _v3
        start = end
        end += 8
        (_x.max_acceleration, _x.max_speed,) = _get_struct_2f().unpack(str[start:end])
        _v4 = val1.rotation
        _x = _v4
        start = end
        end += 8
        (_x.max_acceleration, _x.max_speed,) = _get_struct_2f().unpack(str[start:end])
        self.motion_models.append(val1)
      _x = self
      start = end
      end += 16
      (_x.motion_model_bounds.translation.max_acceleration, _x.motion_model_bounds.translation.max_speed, _x.motion_model_bounds.rotation.max_acceleration, _x.motion_model_bounds.rotation.max_speed,) = _get_struct_4f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.waypoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.waypoints:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
      length = len(self.motion_models)
      buff.write(_struct_I.pack(length))
      for val1 in self.motion_models:
        _v5 = val1.translation
        _x = _v5
        buff.write(_get_struct_2f().pack(_x.max_acceleration, _x.max_speed))
        _v6 = val1.rotation
        _x = _v6
        buff.write(_get_struct_2f().pack(_x.max_acceleration, _x.max_speed))
      _x = self
      buff.write(_get_struct_4f().pack(_x.motion_model_bounds.translation.max_acceleration, _x.motion_model_bounds.translation.max_speed, _x.motion_model_bounds.rotation.max_acceleration, _x.motion_model_bounds.rotation.max_speed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.waypoints is None:
        self.waypoints = None
      if self.motion_models is None:
        self.motion_models = None
      if self.motion_model_bounds is None:
        self.motion_model_bounds = cobot_msgs.msg.MotionModel2D()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.waypoints = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose2D()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        self.waypoints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.motion_models = []
      for i in range(0, length):
        val1 = cobot_msgs.msg.MotionModel2D()
        _v7 = val1.translation
        _x = _v7
        start = end
        end += 8
        (_x.max_acceleration, _x.max_speed,) = _get_struct_2f().unpack(str[start:end])
        _v8 = val1.rotation
        _x = _v8
        start = end
        end += 8
        (_x.max_acceleration, _x.max_speed,) = _get_struct_2f().unpack(str[start:end])
        self.motion_models.append(val1)
      _x = self
      start = end
      end += 16
      (_x.motion_model_bounds.translation.max_acceleration, _x.motion_model_bounds.translation.max_speed, _x.motion_model_bounds.rotation.max_acceleration, _x.motion_model_bounds.rotation.max_speed,) = _get_struct_4f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
