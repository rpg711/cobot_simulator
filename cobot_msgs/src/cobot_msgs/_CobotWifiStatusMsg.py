# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cobot_msgs/CobotWifiStatusMsg.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CobotWifiStatusMsg(genpy.Message):
  _md5sum = "ee551d0b73142d9a28af94b32c048706"
  _type = "cobot_msgs/CobotWifiStatusMsg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 time
int16 rssi
int64 bssid
string bitrate
int64 ip
string ssid
int16 txpower
string quality
"""
  __slots__ = ['time','rssi','bssid','bitrate','ip','ssid','txpower','quality']
  _slot_types = ['float64','int16','int64','string','int64','string','int16','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       time,rssi,bssid,bitrate,ip,ssid,txpower,quality

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CobotWifiStatusMsg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.time is None:
        self.time = 0.
      if self.rssi is None:
        self.rssi = 0
      if self.bssid is None:
        self.bssid = 0
      if self.bitrate is None:
        self.bitrate = ''
      if self.ip is None:
        self.ip = 0
      if self.ssid is None:
        self.ssid = ''
      if self.txpower is None:
        self.txpower = 0
      if self.quality is None:
        self.quality = ''
    else:
      self.time = 0.
      self.rssi = 0
      self.bssid = 0
      self.bitrate = ''
      self.ip = 0
      self.ssid = ''
      self.txpower = 0
      self.quality = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_dhq().pack(_x.time, _x.rssi, _x.bssid))
      _x = self.bitrate
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_q().pack(self.ip))
      _x = self.ssid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_h().pack(self.txpower))
      _x = self.quality
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.time, _x.rssi, _x.bssid,) = _get_struct_dhq().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.bitrate = str[start:end].decode('utf-8')
      else:
        self.bitrate = str[start:end]
      start = end
      end += 8
      (self.ip,) = _get_struct_q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ssid = str[start:end].decode('utf-8')
      else:
        self.ssid = str[start:end]
      start = end
      end += 2
      (self.txpower,) = _get_struct_h().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.quality = str[start:end].decode('utf-8')
      else:
        self.quality = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_dhq().pack(_x.time, _x.rssi, _x.bssid))
      _x = self.bitrate
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_q().pack(self.ip))
      _x = self.ssid
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_h().pack(self.txpower))
      _x = self.quality
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.time, _x.rssi, _x.bssid,) = _get_struct_dhq().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.bitrate = str[start:end].decode('utf-8')
      else:
        self.bitrate = str[start:end]
      start = end
      end += 8
      (self.ip,) = _get_struct_q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ssid = str[start:end].decode('utf-8')
      else:
        self.ssid = str[start:end]
      start = end
      end += 2
      (self.txpower,) = _get_struct_h().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.quality = str[start:end].decode('utf-8')
      else:
        self.quality = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_q = None
def _get_struct_q():
    global _struct_q
    if _struct_q is None:
        _struct_q = struct.Struct("<q")
    return _struct_q
_struct_h = None
def _get_struct_h():
    global _struct_h
    if _struct_h is None:
        _struct_h = struct.Struct("<h")
    return _struct_h
_struct_dhq = None
def _get_struct_dhq():
    global _struct_dhq
    if _struct_dhq is None:
        _struct_dhq = struct.Struct("<dhq")
    return _struct_dhq
