# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cobot_msgs/CobotStarGazerMarkerMsg.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CobotStarGazerMarkerMsg(genpy.Message):
  _md5sum = "a3e8ff9e92ac081742526e8b3595873e"
  _type = "cobot_msgs/CobotStarGazerMarkerMsg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint16 ID
float32 rawX
float32 rawY
float32 rawOrientation

string map
float32 robotX
float32 robotY
float32 robotOrientation
"""
  __slots__ = ['ID','rawX','rawY','rawOrientation','map','robotX','robotY','robotOrientation']
  _slot_types = ['uint16','float32','float32','float32','string','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ID,rawX,rawY,rawOrientation,map,robotX,robotY,robotOrientation

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CobotStarGazerMarkerMsg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.ID is None:
        self.ID = 0
      if self.rawX is None:
        self.rawX = 0.
      if self.rawY is None:
        self.rawY = 0.
      if self.rawOrientation is None:
        self.rawOrientation = 0.
      if self.map is None:
        self.map = ''
      if self.robotX is None:
        self.robotX = 0.
      if self.robotY is None:
        self.robotY = 0.
      if self.robotOrientation is None:
        self.robotOrientation = 0.
    else:
      self.ID = 0
      self.rawX = 0.
      self.rawY = 0.
      self.rawOrientation = 0.
      self.map = ''
      self.robotX = 0.
      self.robotY = 0.
      self.robotOrientation = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_H3f().pack(_x.ID, _x.rawX, _x.rawY, _x.rawOrientation))
      _x = self.map
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3f().pack(_x.robotX, _x.robotY, _x.robotOrientation))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 14
      (_x.ID, _x.rawX, _x.rawY, _x.rawOrientation,) = _get_struct_H3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.map = str[start:end].decode('utf-8')
      else:
        self.map = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.robotX, _x.robotY, _x.robotOrientation,) = _get_struct_3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_H3f().pack(_x.ID, _x.rawX, _x.rawY, _x.rawOrientation))
      _x = self.map
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3f().pack(_x.robotX, _x.robotY, _x.robotOrientation))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 14
      (_x.ID, _x.rawX, _x.rawY, _x.rawOrientation,) = _get_struct_H3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.map = str[start:end].decode('utf-8')
      else:
        self.map = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.robotX, _x.robotY, _x.robotOrientation,) = _get_struct_3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_H3f = None
def _get_struct_H3f():
    global _struct_H3f
    if _struct_H3f is None:
        _struct_H3f = struct.Struct("<H3f")
    return _struct_H3f
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
