# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cobot_msgs/CobotLocationAndStarGazerMsg.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import cobot_msgs.msg
import std_msgs.msg

class CobotLocationAndStarGazerMsg(genpy.Message):
  _md5sum = "3941cf2caaa65b26803dd57a922f2bc7"
  _type = "cobot_msgs/CobotLocationAndStarGazerMsg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """CobotLocalizationMsg location
CobotStarGazerMsg rawStarGazer

================================================================================
MSG: cobot_msgs/CobotLocalizationMsg
float64 timeStamp
float32 x
float32 y
float32 angle
float32 angleUncertainty
float32 locationUncertainty
string map

float64 lastLaserRunTime
float64 laserRunTime
int32 laserNumObservedPoints
int32 laserNumCorrespondences
float32 laserStage0Weights
float32 laserStageRWeights
float32 laserMeanSqError

float64 lastPointCloudRunTime
float64 pointCloudRunTime
int32 pointCloudNumObservedPoints
int32 pointCloudNumCorrespondences
float32 pointCloudStage0Weights
float32 pointCloudStageRWeights
float32 pointCloudMeanSqError


================================================================================
MSG: cobot_msgs/CobotStarGazerMsg
Header header
CobotStarGazerMarkerMsg[] markers

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: cobot_msgs/CobotStarGazerMarkerMsg
uint16 ID
float32 rawX
float32 rawY
float32 rawOrientation

string map
float32 robotX
float32 robotY
float32 robotOrientation
"""
  __slots__ = ['location','rawStarGazer']
  _slot_types = ['cobot_msgs/CobotLocalizationMsg','cobot_msgs/CobotStarGazerMsg']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       location,rawStarGazer

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CobotLocationAndStarGazerMsg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.location is None:
        self.location = cobot_msgs.msg.CobotLocalizationMsg()
      if self.rawStarGazer is None:
        self.rawStarGazer = cobot_msgs.msg.CobotStarGazerMsg()
    else:
      self.location = cobot_msgs.msg.CobotLocalizationMsg()
      self.rawStarGazer = cobot_msgs.msg.CobotStarGazerMsg()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_d5f().pack(_x.location.timeStamp, _x.location.x, _x.location.y, _x.location.angle, _x.location.angleUncertainty, _x.location.locationUncertainty))
      _x = self.location.map
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2d2i3f2d2i3f3I().pack(_x.location.lastLaserRunTime, _x.location.laserRunTime, _x.location.laserNumObservedPoints, _x.location.laserNumCorrespondences, _x.location.laserStage0Weights, _x.location.laserStageRWeights, _x.location.laserMeanSqError, _x.location.lastPointCloudRunTime, _x.location.pointCloudRunTime, _x.location.pointCloudNumObservedPoints, _x.location.pointCloudNumCorrespondences, _x.location.pointCloudStage0Weights, _x.location.pointCloudStageRWeights, _x.location.pointCloudMeanSqError, _x.rawStarGazer.header.seq, _x.rawStarGazer.header.stamp.secs, _x.rawStarGazer.header.stamp.nsecs))
      _x = self.rawStarGazer.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.rawStarGazer.markers)
      buff.write(_struct_I.pack(length))
      for val1 in self.rawStarGazer.markers:
        _x = val1
        buff.write(_get_struct_H3f().pack(_x.ID, _x.rawX, _x.rawY, _x.rawOrientation))
        _x = val1.map
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_3f().pack(_x.robotX, _x.robotY, _x.robotOrientation))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.location is None:
        self.location = cobot_msgs.msg.CobotLocalizationMsg()
      if self.rawStarGazer is None:
        self.rawStarGazer = cobot_msgs.msg.CobotStarGazerMsg()
      end = 0
      _x = self
      start = end
      end += 28
      (_x.location.timeStamp, _x.location.x, _x.location.y, _x.location.angle, _x.location.angleUncertainty, _x.location.locationUncertainty,) = _get_struct_d5f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.location.map = str[start:end].decode('utf-8')
      else:
        self.location.map = str[start:end]
      _x = self
      start = end
      end += 84
      (_x.location.lastLaserRunTime, _x.location.laserRunTime, _x.location.laserNumObservedPoints, _x.location.laserNumCorrespondences, _x.location.laserStage0Weights, _x.location.laserStageRWeights, _x.location.laserMeanSqError, _x.location.lastPointCloudRunTime, _x.location.pointCloudRunTime, _x.location.pointCloudNumObservedPoints, _x.location.pointCloudNumCorrespondences, _x.location.pointCloudStage0Weights, _x.location.pointCloudStageRWeights, _x.location.pointCloudMeanSqError, _x.rawStarGazer.header.seq, _x.rawStarGazer.header.stamp.secs, _x.rawStarGazer.header.stamp.nsecs,) = _get_struct_2d2i3f2d2i3f3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rawStarGazer.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.rawStarGazer.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.rawStarGazer.markers = []
      for i in range(0, length):
        val1 = cobot_msgs.msg.CobotStarGazerMarkerMsg()
        _x = val1
        start = end
        end += 14
        (_x.ID, _x.rawX, _x.rawY, _x.rawOrientation,) = _get_struct_H3f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.map = str[start:end].decode('utf-8')
        else:
          val1.map = str[start:end]
        _x = val1
        start = end
        end += 12
        (_x.robotX, _x.robotY, _x.robotOrientation,) = _get_struct_3f().unpack(str[start:end])
        self.rawStarGazer.markers.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_d5f().pack(_x.location.timeStamp, _x.location.x, _x.location.y, _x.location.angle, _x.location.angleUncertainty, _x.location.locationUncertainty))
      _x = self.location.map
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2d2i3f2d2i3f3I().pack(_x.location.lastLaserRunTime, _x.location.laserRunTime, _x.location.laserNumObservedPoints, _x.location.laserNumCorrespondences, _x.location.laserStage0Weights, _x.location.laserStageRWeights, _x.location.laserMeanSqError, _x.location.lastPointCloudRunTime, _x.location.pointCloudRunTime, _x.location.pointCloudNumObservedPoints, _x.location.pointCloudNumCorrespondences, _x.location.pointCloudStage0Weights, _x.location.pointCloudStageRWeights, _x.location.pointCloudMeanSqError, _x.rawStarGazer.header.seq, _x.rawStarGazer.header.stamp.secs, _x.rawStarGazer.header.stamp.nsecs))
      _x = self.rawStarGazer.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.rawStarGazer.markers)
      buff.write(_struct_I.pack(length))
      for val1 in self.rawStarGazer.markers:
        _x = val1
        buff.write(_get_struct_H3f().pack(_x.ID, _x.rawX, _x.rawY, _x.rawOrientation))
        _x = val1.map
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_3f().pack(_x.robotX, _x.robotY, _x.robotOrientation))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.location is None:
        self.location = cobot_msgs.msg.CobotLocalizationMsg()
      if self.rawStarGazer is None:
        self.rawStarGazer = cobot_msgs.msg.CobotStarGazerMsg()
      end = 0
      _x = self
      start = end
      end += 28
      (_x.location.timeStamp, _x.location.x, _x.location.y, _x.location.angle, _x.location.angleUncertainty, _x.location.locationUncertainty,) = _get_struct_d5f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.location.map = str[start:end].decode('utf-8')
      else:
        self.location.map = str[start:end]
      _x = self
      start = end
      end += 84
      (_x.location.lastLaserRunTime, _x.location.laserRunTime, _x.location.laserNumObservedPoints, _x.location.laserNumCorrespondences, _x.location.laserStage0Weights, _x.location.laserStageRWeights, _x.location.laserMeanSqError, _x.location.lastPointCloudRunTime, _x.location.pointCloudRunTime, _x.location.pointCloudNumObservedPoints, _x.location.pointCloudNumCorrespondences, _x.location.pointCloudStage0Weights, _x.location.pointCloudStageRWeights, _x.location.pointCloudMeanSqError, _x.rawStarGazer.header.seq, _x.rawStarGazer.header.stamp.secs, _x.rawStarGazer.header.stamp.nsecs,) = _get_struct_2d2i3f2d2i3f3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rawStarGazer.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.rawStarGazer.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.rawStarGazer.markers = []
      for i in range(0, length):
        val1 = cobot_msgs.msg.CobotStarGazerMarkerMsg()
        _x = val1
        start = end
        end += 14
        (_x.ID, _x.rawX, _x.rawY, _x.rawOrientation,) = _get_struct_H3f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.map = str[start:end].decode('utf-8')
        else:
          val1.map = str[start:end]
        _x = val1
        start = end
        end += 12
        (_x.robotX, _x.robotY, _x.robotOrientation,) = _get_struct_3f().unpack(str[start:end])
        self.rawStarGazer.markers.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d2i3f2d2i3f3I = None
def _get_struct_2d2i3f2d2i3f3I():
    global _struct_2d2i3f2d2i3f3I
    if _struct_2d2i3f2d2i3f3I is None:
        _struct_2d2i3f2d2i3f3I = struct.Struct("<2d2i3f2d2i3f3I")
    return _struct_2d2i3f2d2i3f3I
_struct_H3f = None
def _get_struct_H3f():
    global _struct_H3f
    if _struct_H3f is None:
        _struct_H3f = struct.Struct("<H3f")
    return _struct_H3f
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_d5f = None
def _get_struct_d5f():
    global _struct_d5f
    if _struct_d5f is None:
        _struct_d5f = struct.Struct("<d5f")
    return _struct_d5f
