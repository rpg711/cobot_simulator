# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cobot_msgs/CobotRemoteMonitoring.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CobotRemoteMonitoring(genpy.Message):
  _md5sum = "73fa4fd123afd92fd14ba62598d06260"
  _type = "cobot_msgs/CobotRemoteMonitoring"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32[] filteredPoints
int32[] filteredNormals
int16[] laserScan
int16[] kinectScan
int16 locX
int16 locY
int16 angle
int16 vX
int16 vY
int16 vAngle

"""
  __slots__ = ['filteredPoints','filteredNormals','laserScan','kinectScan','locX','locY','angle','vX','vY','vAngle']
  _slot_types = ['int32[]','int32[]','int16[]','int16[]','int16','int16','int16','int16','int16','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       filteredPoints,filteredNormals,laserScan,kinectScan,locX,locY,angle,vX,vY,vAngle

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CobotRemoteMonitoring, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.filteredPoints is None:
        self.filteredPoints = []
      if self.filteredNormals is None:
        self.filteredNormals = []
      if self.laserScan is None:
        self.laserScan = []
      if self.kinectScan is None:
        self.kinectScan = []
      if self.locX is None:
        self.locX = 0
      if self.locY is None:
        self.locY = 0
      if self.angle is None:
        self.angle = 0
      if self.vX is None:
        self.vX = 0
      if self.vY is None:
        self.vY = 0
      if self.vAngle is None:
        self.vAngle = 0
    else:
      self.filteredPoints = []
      self.filteredNormals = []
      self.laserScan = []
      self.kinectScan = []
      self.locX = 0
      self.locY = 0
      self.angle = 0
      self.vX = 0
      self.vY = 0
      self.vAngle = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.filteredPoints)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.filteredPoints))
      length = len(self.filteredNormals)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.filteredNormals))
      length = len(self.laserScan)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(struct.pack(pattern, *self.laserScan))
      length = len(self.kinectScan)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(struct.pack(pattern, *self.kinectScan))
      _x = self
      buff.write(_get_struct_6h().pack(_x.locX, _x.locY, _x.angle, _x.vX, _x.vY, _x.vAngle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.filteredPoints = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.filteredNormals = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      end += struct.calcsize(pattern)
      self.laserScan = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      end += struct.calcsize(pattern)
      self.kinectScan = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 12
      (_x.locX, _x.locY, _x.angle, _x.vX, _x.vY, _x.vAngle,) = _get_struct_6h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.filteredPoints)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.filteredPoints.tostring())
      length = len(self.filteredNormals)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.filteredNormals.tostring())
      length = len(self.laserScan)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(self.laserScan.tostring())
      length = len(self.kinectScan)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(self.kinectScan.tostring())
      _x = self
      buff.write(_get_struct_6h().pack(_x.locX, _x.locY, _x.angle, _x.vX, _x.vY, _x.vAngle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.filteredPoints = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.filteredNormals = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      end += struct.calcsize(pattern)
      self.laserScan = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      end += struct.calcsize(pattern)
      self.kinectScan = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=length)
      _x = self
      start = end
      end += 12
      (_x.locX, _x.locY, _x.angle, _x.vX, _x.vY, _x.vAngle,) = _get_struct_6h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6h = None
def _get_struct_6h():
    global _struct_6h
    if _struct_6h is None:
        _struct_6h = struct.Struct("<6h")
    return _struct_6h
